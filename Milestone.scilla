
(***************************************************)
(*                 Scilla version                  *)
(***************************************************)

scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
library Milestone

let not_owner_code  = Uint32 1
let milestone_one_completed  = Uint32 2
let claimed_code = Uint32 3
let milestone_one_not_completed = Uint32 4
let milestone_two_completed = Uint32 5
let milestone_two_not_completed = Uint32 6
let milestone_three_completed = Uint32 7

let one_msg =
  fun (msg : Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract Milestone

(owner: ByStr20,
milestone_one: Uint128,
milestone_two: Uint128,
milestone_three: Uint128,
company_address: ByStr20
 )

field completed_milestone_one : Bool = False
field completed_milestone_two : Bool = False
field completed_milestone_three : Bool = False

procedure PerformClaimBack (amount : Uint128)
  msg = {_tag : ""; _recipient : company_address; _amount : amount; code : claimed_code};
  msgs = one_msg msg;
  e = { _eventname : "ClaimSuccess"; caller : company_address; amount : amount; code : claimed_code};
  event e;
  send msgs
end

transition finish_milestone_one()
    is_owner = builtin eq owner _sender;
    match is_owner with
    | False =>
        e = {_eventname : "finish_milestone_one"; code : not_owner_code};
        event e
    | True =>
        PerformClaimBack milestone_one;
        tt = True;
        completed_milestone_one := tt;
        e = {_eventname : "finish_milestone_one"; code : milestone_one_completed};
        event e
    end
end

transition finish_milestone_two()
    is_owner = builtin eq owner _sender;
    match is_owner with
    | False =>
        e = {_eventname : "finish_milestone_one"; code : not_owner_code};
        event e
    | True =>
        c <- completed_milestone_one;
        match c with 
        | False =>
            e = {_eventname : "finish_milestone_two"; code : milestone_one_not_completed};
            event e
        | True =>
            PerformClaimBack milestone_two;
            tt = True;
            completed_milestone_two := tt;
            e = {_eventname : "finish_milestone_two"; code : milestone_two_completed};
            event e
        end
    end
end




transition finish_milestone_three()
    is_owner = builtin eq owner _sender;
    match is_owner with
    | False =>
        e = {_eventname : "finish_milestone_three"; code : not_owner_code};
        event e
    | True =>
        c <- completed_milestone_two;
        match c with 
        | False =>
            e = {_eventname : "finish_milestone_three"; code : milestone_two_not_completed};
            event e
        | True =>
            PerformClaimBack milestone_three;
            tt = True;
            completed_milestone_three := tt;
            e = {_eventname : "finish_milestone_three"; code : milestone_three_completed};
            event e
        end
    end
end